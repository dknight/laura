#!/usr/bin/env lua

package.path = package.path .. ";./src/?.lua;./src/?/?.lua;./src/?/init.lua"

local laura = require("laura")
local LuaVersion = laura.LuaVersion
local Context = laura.Context
local Labels = laura.Labels
local Runner = laura.Runner
local Terminal = laura.Terminal

--COMPAT include path fix for lua 5.1 and lua 5.2
-- coverage: disable
if LuaVersion[_VERSION] <= LuaVersion["Lua 5.2"] then
	package.path = package.path .. ";./?/init.lua"
end
-- coverage: enable

local fs = require("laura.util.fs")
local helpers = require("laura.util.helpers")
local Reporter = require("laura.Reporter")

local ctx = Context.global()

-- last argument should be directory with tests
local dir = arg[#arg]
if not fs.isdir(dir) then
	dir = ctx.config.Dir
end

if not fs.isdir(dir) and dir ~= "." and dir ~= "./" and dir ~= ".\\" then
	error(dir .. " " .. Labels.ErrorNotADir)
end

local files, fcount = fs.getFiles(dir)
if fcount == 0 then
	print(Labels.NoTests)
	os.exit(ctx.config._Exit.OK)
end

-- Sorting files in alphabetical order to keep consistency.
for fname in helpers.spairs(files) do
	-- FIXME do not use _G?
	local chunk, err = loadfile(fname, "t", _G)
	if chunk ~= nil then
		chunk()
	else
		Terminal.printActual(err or Labels.errorSyntax)
		os.exit(ctx.config._Exit.SysErr)
	end
end

local runner = Runner:new()
local results = runner:runTests()
local genericReporter = Reporter:new(results)

genericReporter:reportErrors()

local covStart = 0
local covFinish = 0

if ctx.config.Coverage.Enabled and ctx.coverage ~= nil then
	covStart = os.clock()
	local CoverageReporter =
		require("laura.reporters.coverage.CoverageReporter")

	CoverageReporter.printTitle()

	for _, coverageReporter in ipairs(ctx.coverage.reporters) do
		coverageReporter:report()
	end

	local commonCovReporter =
		CoverageReporter:new(ctx.coverage, ctx.config.Coverage.Threshold)
	commonCovReporter:results()
	covFinish = os.clock()
end

genericReporter:finalSummary(covFinish - covStart)
runner:done()
