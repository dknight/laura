#!/usr/bin/env lua

package.path = package.path .. ";./src/?.lua;./src/?/init.lua"

local laura = require("laura")
local Version = laura.Version
local Context = laura.Context
local Labels = laura.Labels
local Runner = laura.Runner
local Terminal = laura.Terminal

--COMPAT include path fix for lua 5.1 and lua 5.2
if Version[_VERSION] <= Version["Lua 5.2"] then
	package.path = package.path .. ";./?/init.lua"
end

local fs = require("laura.util.fs")
local helpers = require("laura.util.helpers")
local Reporter = require("laura.reporters.Reporter")

local ctx = Context.global()
local runner = Runner:new()

helpers.processFlags()

-- last argument should be directory with tests
local dir = arg[#arg]
if not fs.isDir(dir) then
	dir = ctx.config.Dir
end

if not fs.isDir(dir) and dir ~= "." and dir ~= "./" and dir ~= ".\\" then
	error(dir .. " " .. Labels.ErrorNotADir)
end

local files, fcount = fs.getFiles(dir)
if fcount == 0 then
	print(Labels.NoTests)
	os.exit(ctx.config._exitOK)
end

-- Sorting files in alphabetical order to keep consistency.
for fname in helpers.spairs(files) do
	local chunk, err = loadfile(fname, "t", _G)
	if chunk ~= nil then
		chunk()
	else
		Terminal.printActual(err or Labels.errorSyntax)
		os.exit(ctx.config._exitFailed)
	end
end

local results = runner:runTests()
local genericReporter = Reporter:new(results)

genericReporter:report(ctx.config.ReportSummary)

if ctx.config.Coverage.Enabled then
	genericReporter:reportCoverage()
end

runner:done()
